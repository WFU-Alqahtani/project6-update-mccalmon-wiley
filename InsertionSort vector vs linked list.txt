InsertionSort vector vs linked list Cade and Joe

For a vector, insertion sort's big O is n^2 because the algorithm first has to traverse the vector to find the right location, and then has to move the location of every other element in the vector to make room. With a linked list, the algorithm just has to traverse the linked list, and then once it finds the right location for the element using comparisons, it just makes an insertion, which has a complexity of O(1). So, the total complexity is n * 1, which comes out to O(n). The fact that linked lists have constant runtime when inserting at a location is what makes it better for insertion sort than vectors, because the linked list does not have to move every element in the list for an insertion. 